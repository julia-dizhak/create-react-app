{"version":3,"sources":["components/MovieItem.js","components/MovieTabs.js","components/Pagination.js","utils/api.js","MovieContent.js","serviceWorker.js","index.js"],"names":["MovieItem","props","state","willWatch","this","movie","removeMovie","addMovieToWillWatch","removeMovieFromWillWatch","title","vote_average","backdrop_path","poster_path","className","src","alt","type","onClick","setState","bind","Component","MovieTabs","sortBy","updatedSortBy","getClassTab","value","Pagination","currentPage","totalPages","setCurrentPage","renderPages","Array","from","keys","map","page","index","key","MovieContent","movies","moviesWillWatch","fetch","then","response","json","data","results","total_pages","getMovies","prevProps","prevState","updatedMovies","filter","item","id","updatedMoviesWillWatch","order","Container","Row","Col","xs","mb","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6RA8EeA,E,kDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,WAAW,GAHI,E,qDAOT,IAAD,OACCA,EAAcC,KAAKF,MAAnBC,UADD,EAOHC,KAAKH,MAJPI,EAHK,EAGLA,MACAC,EAJK,EAILA,YACAC,EALK,EAKLA,oBACAC,EANK,EAMLA,yBAGMC,EAAoDJ,EAApDI,MAAOC,EAA6CL,EAA7CK,aAAcC,EAA+BN,EAA/BM,cAAeC,EAAgBP,EAAhBO,YAE5C,OACE,yBAAKC,UAAU,QACb,yBACEA,UAAU,eACVC,IAAG,yCAAoCH,GAAiBC,GACxDG,IAAI,KAGN,yBAAKF,UAAU,aACb,wBAAIA,UAAU,cAAcJ,GAC5B,uBAAGI,UAAU,QAAb,WACWH,GAGX,yBAAKG,UAAU,qDACZV,EACC,4BACEa,KAAK,SACLH,UAAU,kBACVI,QAAS,WACP,EAAKC,SAAS,CACZf,WAAW,IAEbK,EAAyBH,KAP7B,qBAaE,4BACEW,KAAK,SACLH,UAAU,oBACVI,QAAS,WACP,EAAKC,SAAS,CACZf,WAAW,IAEbI,EAAoBF,KAPxB,cAcJ,4BACEQ,UAAU,kBACVG,KAAK,SACLC,QAASX,EAAYa,KAAK,KAAMd,IAHlC,uB,GA9DYe,a,KCCT,SAASC,EAAUpB,GAAQ,IAChCqB,EAA0BrB,EAA1BqB,OAAQC,EAAkBtB,EAAlBsB,cAEVC,EAAc,SAAAC,GAClB,MAAM,YAAN,OAAmBH,IAAWG,EAAQ,SAAW,OAGnD,OACE,wBAAIZ,UAAU,uDACZ,wBAAIA,UAAU,iBACZ,4BACEA,UAAWW,EAAY,mBACvBP,QAAS,kBAAMM,EAAc,qBAF/B,eAOF,wBAAIV,UAAU,iBACZ,4BACEA,UAAWW,EAAY,gBACvBP,QAAS,kBAAMM,EAAc,kBAF/B,YAOF,wBAAIV,UAAU,YACZ,4BACEA,UAAWW,EAAY,qBACvBP,QAAS,kBAAMM,EAAc,uBAF/B,kBC3BO,SAASG,EAAWzB,GAAQ,IACjC0B,EAA2C1B,EAA3C0B,YAAaC,EAA8B3B,EAA9B2B,WAAYC,EAAkB5B,EAAlB4B,eAG3BC,EADcC,MAAMC,KAAKD,MAAMH,GAAYK,QACjBC,KAAI,SAACC,EAAMC,GACzC,OACW,IAATD,GACAA,IAASP,GACRO,GAAQR,EAAc,GAAKQ,GAAQR,EAAc,EAGhD,4BACEU,IAAKF,EAAOC,EACZpB,KAAK,SACLH,UAAWc,IAAgBQ,EAAO,SAAW,KAC7ClB,QAAS,kBAAMY,EAAeM,KAE3BA,GAIF,QAGT,OACE,yBAAKtB,UAAU,wBACb,4BACEI,QAAS,kBAAMY,EAAeF,EAAc,KAD9C,QAICG,EACD,4BACEb,QAAS,kBAAMY,EAAeF,EAAc,KAD9C,QAICC,G,MCrCA,ICScU,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKpC,MAAQ,CACXqC,OAAQ,GACRC,gBAAiB,GACjBlB,OAAQ,eACRK,YAAa,EACbC,WAAY,GAGd,EAAKtB,YAAc,EAAKA,YAAYa,KAAjB,gBACnB,EAAKZ,oBAAsB,EAAKA,oBAAoBY,KAAzB,gBAC3B,EAAKX,yBAA2B,EAAKA,yBAAyBW,KAA9B,gBAChC,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKU,eAAiB,EAAKA,eAAeV,KAApB,gBAfV,E,wDAkBD,IAAD,SACsBf,KAAKF,MAA7BoB,EADE,EACFA,OAAQK,EADN,EACMA,YAChBc,MAAM,GAAD,OD7BW,gCC6BX,kCD9Bc,mCC8Bd,oBAAwDnB,EAAxD,iBAAuEK,IACzEe,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAK3B,SAAS,CACZqB,OAAQM,EAAKC,QACblB,WAAYiB,EAAKE,mB,0CAMvB3C,KAAK4C,c,yCAGYC,EAAWC,GAAY,IAAD,EACP9C,KAAKF,MAA7BoB,EAD+B,EAC/BA,OAAQK,EADuB,EACvBA,YAEZuB,EAAU5B,SAAWA,GAAU4B,EAAUvB,cAAgBA,GAC3DvB,KAAK4C,c,kCAIG3C,GAAQ,IAEZ8C,EADa/C,KAAKF,MAAhBqC,OACqBa,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOjD,EAAMiD,MAC9DlD,KAAKc,SAAS,CACZqB,OAAQY,M,0CAIQ9C,GAAQ,IAClBmC,EAAoBpC,KAAKF,MAAzBsC,gBACFe,EAAsB,sBACvBf,GADuB,CAE1BnC,IAEFD,KAAKc,SAAS,CACZsB,gBAAiBe,M,+CAIIlD,GAAQ,IAEzBkD,EADsBnD,KAAKF,MAAzBsC,gBACuCY,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAOjD,EAAMiD,MAChFlD,KAAKc,SAAS,CACZsB,gBAAiBe,M,oCAIPC,GACZpD,KAAKc,SAAS,CACZI,OAAQkC,M,qCAIGrB,GACTA,EAAO,GACT/B,KAAKc,SAAS,CACZS,YAAaQ,M,+BAKT,IAAD,SAC8D/B,KAAKF,MAAlEqC,EADD,EACCA,OAAQC,EADT,EACSA,gBAAiBlB,EAD1B,EAC0BA,OAAQK,EADlC,EACkCA,YAAaC,EAD/C,EAC+CA,WAEtD,OACE,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK7C,UAAU,QACb,kBAAC8C,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACvC,EAAD,CACEC,OAAQA,EACRC,cAAenB,KAAKmB,iBAGxB,kBAACoC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAClC,EAAD,CACEC,YAAaA,EACbC,WAAYA,EACZC,eAAgBzB,KAAKyB,mBAI3B,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAACF,EAAA,EAAD,KACGnB,EAAOL,KAAI,SAAA7B,GACV,OACE,kBAACsD,EAAA,EAAD,CACEtB,IAAKhC,EAAMiD,GACXM,GAAI,EACJC,GAAI,GAEJ,kBAAC,EAAD,CACExD,MAAOA,EACPC,YAAa,EAAKA,YAClBC,oBAAqB,EAAKA,oBAC1BC,yBAA0B,EAAKA,iCAO3C,kBAACmD,EAAA,EAAD,CAAKC,GAAI,GAAT,eACepB,EAAgBsB,c,GAhIC1C,aCGtB2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c013110.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass MovieItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      willWatch: false\n     };\n  }\n\n  render() {\n    const { willWatch } = this.state;\n    const {\n      movie,\n      removeMovie,\n      addMovieToWillWatch,\n      removeMovieFromWillWatch\n    } = this.props;\n\n    const { title, vote_average, backdrop_path, poster_path } = movie;\n\n    return (\n      <div className=\"card\">\n        <img\n          className=\"card-img-top\"\n          src={`https://image.tmdb.org/t/p/w500${backdrop_path || poster_path}`}\n          alt=\"\"\n        />\n\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">{title}</h6>\n          <p className=\"mb-2\">\n            Rating: {vote_average}\n          </p>\n\n          <div className=\"d-flex justify-content-between align-items-center\">\n            {willWatch ? (\n              <button\n                type=\"button\"\n                className=\"btn btn-success\"\n                onClick={() => {\n                  this.setState({\n                    willWatch: false\n                  })\n                  removeMovieFromWillWatch(movie)\n                }}\n              >\n                remove will watch\n              </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-secondary\"\n                  onClick={() => {\n                    this.setState({\n                      willWatch: true\n                    })\n                    addMovieToWillWatch(movie)\n                  }}\n                >\n                  will watch\n                </button>\n              )\n            }\n            <button\n              className=\"btn btn-primary\"\n              type=\"button\"\n              onClick={removeMovie.bind(null, movie)}>\n              delete movie\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default MovieItem;\n","import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function MovieTabs(props) {\n  const { sortBy, updatedSortBy } = props;\n\n  const getClassTab = value => {\n    return `nav-link ${sortBy === value ? 'active' : null}`\n  }\n\n  return (\n    <ul className=\"tabs nav nav-pills mb-3 mt-3 justify-content-center\">\n      <li className=\"nav-item mr-3\">\n        <button\n          className={getClassTab('popularity.desc')}\n          onClick={() => updatedSortBy('popularity.desc')}\n          >\n          Popularity\n        </button>\n      </li>\n      <li className=\"nav-item mr-3\">\n        <button\n          className={getClassTab('revenue.desc')}\n          onClick={() => updatedSortBy('revenue.desc')}\n        >\n          Revenue\n        </button>\n      </li>\n      <li className=\"nav-item\">\n        <button\n          className={getClassTab('vote_average.desc')}\n          onClick={() => updatedSortBy('vote_average.desc')}\n        >\n          Vote average\n        </button>\n      </li>\n    </ul>\n  );\n\n}\n\n","import React from \"react\";\n\nexport default function Pagination(props) {\n  const { currentPage, totalPages, setCurrentPage} = props;\n\n  const pageNumbers = Array.from(Array(totalPages).keys());\n  const renderPages = pageNumbers.map((page, index) => {\n    if (\n      page === 1 ||\n      page === totalPages ||\n      (page >= currentPage - 2 && page <= currentPage + 2)\n    ) {\n      return (\n        <button\n          key={page + index}\n          type=\"button\"\n          className={currentPage === page ? 'active' : null}\n          onClick={() => setCurrentPage(page)}\n          >\n            {page}\n        </button>\n      )\n    }\n    return null\n  });\n\n  return (\n    <div className=\"pagination mb-3 mt-4\">\n      <button\n        onClick={() => setCurrentPage(currentPage - 1)}>\n        prev\n      </button>\n      {renderPages}\n      <button\n        onClick={() => setCurrentPage(currentPage + 1)}>\n        next\n      </button>\n      {totalPages}\n    </div>\n  );\n}\n\n","export const API_KEY = '3f4ca4f3a9750da53450646ced312397';\nexport const API_URL = `https://api.themoviedb.org/3/`;\n","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport MovieItem from './components/MovieItem';\nimport MovieTabs from './components/MovieTabs';\nimport Pagination from './components/Pagination';\nimport { API_URL, API_KEY } from './utils/api';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default class MovieContent extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      moviesWillWatch: [],\n      sortBy: 'revenue.desc',\n      currentPage: 1,\n      totalPages: 0\n    }\n\n    this.removeMovie = this.removeMovie.bind(this);\n    this.addMovieToWillWatch = this.addMovieToWillWatch.bind(this);\n    this.removeMovieFromWillWatch = this.removeMovieFromWillWatch.bind(this);\n    this.updatedSortBy = this.updatedSortBy.bind(this);\n    this.setCurrentPage = this.setCurrentPage.bind(this);\n  }\n\n  getMovies() {\n    const { sortBy, currentPage } = this.state;\n    fetch(`${API_URL}discover/movie?api_key=${API_KEY}&sort_by=${sortBy}&page=${currentPage}`)\n      .then((response) => {\n        return response.json()\n      })\n      .then((data) => {\n        this.setState({\n          movies: data.results,\n          totalPages: data.total_pages\n        })\n      })\n  }\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { sortBy, currentPage } = this.state;\n    // todo\n    if (prevState.sortBy !== sortBy || prevState.currentPage !== currentPage) {\n      this.getMovies()\n    }\n  }\n\n  removeMovie(movie) {\n    const { movies } = this.state;\n    const updatedMovies = movies.filter(item => item.id !== movie.id);\n    this.setState({\n      movies: updatedMovies\n    })\n  }\n\n  addMovieToWillWatch(movie) {\n    const { moviesWillWatch } = this.state;\n    const updatedMoviesWillWatch = [\n      ...moviesWillWatch,\n      movie\n    ];\n    this.setState({\n      moviesWillWatch: updatedMoviesWillWatch\n    })\n  }\n\n  removeMovieFromWillWatch(movie) {\n    const { moviesWillWatch } = this.state;\n    const updatedMoviesWillWatch = moviesWillWatch.filter(item => item.id !== movie.id);\n    this.setState({\n      moviesWillWatch: updatedMoviesWillWatch\n    })\n  }\n\n  updatedSortBy(order) {\n    this.setState({\n      sortBy: order\n    })\n  }\n\n  setCurrentPage(page) {\n    if (page > 0) {\n      this.setState({\n        currentPage: page\n      })\n    }\n  }\n\n  render() {\n    const { movies, moviesWillWatch, sortBy, currentPage, totalPages } = this.state;\n\n    return (\n      <Container>\n        <Row className=\"mb-4\">\n          <Col xs={9}>\n            <MovieTabs\n              sortBy={sortBy}\n              updatedSortBy={this.updatedSortBy}\n            />\n          </Col>\n          <Col xs={3}>\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              setCurrentPage={this.setCurrentPage}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={9}>\n            <Row>\n              {movies.map(movie => {\n                return (\n                  <Col\n                    key={movie.id}\n                    xs={6}\n                    mb={4}\n                  >\n                    <MovieItem\n                      movie={movie}\n                      removeMovie={this.removeMovie}\n                      addMovieToWillWatch={this.addMovieToWillWatch}\n                      removeMovieFromWillWatch={this.removeMovieFromWillWatch}\n                    />\n                  </Col>\n                )\n              })}\n            </Row>\n          </Col>\n          <Col xs={3}>\n            will watch: {moviesWillWatch.length}\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MovieContent from './MovieContent';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MovieContent />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}